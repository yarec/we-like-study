传统MVC系统中,大量的业务逻辑操作,都在服务端代码中实现
但在这个系统中,大量的业务逻辑代码,都在数据库层实现,用存储过程或函数的方式
之所以用这种方式,是以为传统的 MVC 模式有一个诟病:开发人员逐渐远离SQL代码,直到忽视 IO 操作,
一旦当系统上线后,业务数据暴增之后,问题就出现了并且不可解决

所以本系统中,业务逻辑主要被放置在SQL中,用存储过程或函数的方式实现
规定:
每一张业务表,都要有的字段有:
id
type 
status
time_created
time_lastupdated
count_updated
id_creater
id_creater_group
code_creater_group

每创建一张业务表,都要创建对应的函数或者存储过程:
__import ,用于实施 EXCEL 导入
__export ,用于实施 EXCEL 导出
__init4test , 用于批量插入上百万的数据
__immunity , 用于自检当天产生的业务数据,以定时任务的形式周期执行
__backup_month , 将本月产生的业务数据,备份到一个额外的服务器硬件上 

#status字段描述
#0 业务逻辑错误,将在下次程序自检中被物理删除
#1 正确并流程已结束, 
#2 正在走业务流程, 21 走业务流程,等待某部门审批通过, 22 等待多个部门共同审批,需要全部通过, 23 多审批,单通过
#3 原始业务数据编辑状态, 31 新建状态,新建后保存等待下次更改,尚未发布, 32 修改状态,因某种原因,数据正在被修改中,            
#4 正式发布                         
#5 作废 , 51 因实文件有效期到期正常作废 , 52 因异常事件作废
#在一般的OA中,数据的状态是:            
# 31(用户新建) - 21(等待单点审批) - 4(审批通过) - 5(作废)            
#或者 31-21-32-21-32-21-4-5, 表示审批驳回修改     